name: Deploy Backend to EC2

on:
  push:
    branches: ["master"]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci --omit=dev

      - name: Build project
        run: npm run build

      - name: Package build
        run: |
          mkdir deploy
          cp -r dist package.json package-lock.json deploy/
          tar -czf deploy.tar.gz -C deploy .

      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Copy build to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no deploy.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/

      - name: Deploy on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            cd /home/ubuntu/localhost-backend

            # Cleanup old dist
            rm -rf dist

            # Extract new build
            tar -xzf ~/deploy.tar.gz -C /home/ubuntu/localhost-backend
            rm ~/deploy.tar.gz

            # Install production deps (faster with cached ~/.npm)
            npm ci --omit=dev --prefer-offline

            # Update env file
            cat > .env.production <<EOL
            PORT=${{ secrets.PORT }}
            NODE_ENV=production
            DB_URI=${{ secrets.DB_URI }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            JWT_EXP_IN=${{ secrets.JWT_EXP_IN }}
            ARCJET_ENV=${{ secrets.ARCJET_ENV }}
            ARCJET_KEY=${{ secrets.ARCJET_KEY }}
            REDIS_TOKEN=${{ secrets.REDIS_TOKEN }}
            REDIS_READONLY_TOKEN=${{ secrets.REDIS_READONLY_TOKEN }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}
            JWT_REFRESH_EXP_IN=${{ secrets.JWT_REFRESH_EXP_IN }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            OPEN_AI_KEY=${{ secrets.OPEN_AI_KEY }}
            GEMINI_KEY=${{ secrets.GEMINI_KEY }}
            THIRTY_DAYS=${{ secrets.THIRTY_DAYS }}
            EOL

            # Restart app
            if ! command -v pm2 >/dev/null 2>&1; then
              sudo npm install -g pm2
            fi
            pm2 start ecosystem.config.cjs --interpreter node --env production || pm2 reload all
            pm2 save
          EOF
